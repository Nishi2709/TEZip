Timer unit: 1e-06 s

Total time: 16.7373 s
File: src/compress.py
Function: error_bound at line 94

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    94                                           @profile
    95                                           def error_bound(origine, diff, mode, value, GPU_FLAG, xp):
    96         7         18.9      2.7      0.0  	if value[0] == 0: return diff  # Do nothing if lossless compression
    97                                           	#Df = diff.reshape(diff.shape[0], diff.shape[1]*diff.shape[2] , diff.shape[3])
    98                                           	#Bf = origine.reshape(origine.shape[0], origine.shape[1]*origine.shape[2] , origine.shape[3])
    99         7        102.4     14.6      0.0  	Df = diff.reshape(diff.shape[1], diff.shape[2]*diff.shape[3] , diff.shape[4])
   100         7         11.7      1.7      0.0  	Bf = origine.reshape(origine.shape[1], origine.shape[2]*origine.shape[3] , origine.shape[4])
   101                                           
   102         7          4.2      0.6      0.0  	if mode == "abs":
   103         7       2030.6    290.1      0.0  		E = xp.abs(value[0])
   104                                           	elif mode == "rel":
   105                                           		#diff_max = origine.max(axis=(1, 2), keepdims=True)
   106                                           		#diff_min = origine.min(axis=(1, 2), keepdims=True)
   107                                           		diff_max = Bf.max(axis=(1), keepdims=True)
   108                                           		diff_min = Bf.min(axis=(1), keepdims=True)
   109                                           		E = (diff_max - diff_min) * value[0]
   110                                           	elif mode == "absrel":
   111                                           		if value[1] == 0:
   112                                           			return diff
   113                                           		#diff_max = origine.max(axis=(1, 2), keepdims=True)
   114                                           		#diff_min = origine.min(axis=(1, 2), keepdims=True)
   115                                           		diff_max = Bf.max(axis=(1), keepdims=True)
   116                                           		diff_min = Bf.min(axis=(1), keepdims=True)
   117                                           		abs_value = xp.abs(value[0])
   118                                           		rel_value = (diff_max - diff_min) * value[1]
   119                                           		E = xp.where(abs_value < rel_value, abs_value, rel_value)
   120                                           	elif mode == "pwrel":
   121                                           		E = origine * value[0]  # Error abs
   122                                           	
   123         7       1721.0    245.9      0.0  	Du = Df + E  # Du: Upper error bound
   124         7       4673.9    667.7      0.0  	Dl = Df - E  # Dl: Lower error bound
   125                                           
   126         7        164.8     23.5      0.0  	u_per_channel_array = np.full((5,3),float(np.inf)) # Temp upper error bound
   127         7         23.1      3.3      0.0  	l_per_channel_array = np.full((5,3),-float(np.inf)) # Temp lower error bound
   128                                           
   129         7          1.3      0.2      0.0  	if GPU_FLAG:
   130         7     170704.5  24386.4      1.0  		Df = xp.asnumpy(Df)
   131         7      27650.9   3950.1      0.2  		Du = xp.asnumpy(Du)
   132         7      31160.6   4451.5      0.2  		Dl = xp.asnumpy(Dl)
   133         7         98.8     14.1      0.0  		u_per_channel_array = xp.asnumpy(u_per_channel_array)
   134         7         14.4      2.1      0.0  		l_per_channel_array = xp.asnumpy(l_per_channel_array)
   135                                           
   136         7         33.4      4.8      0.0  	head_per_channel_array = np.zeros((5,3), dtype=int)
   137                                           
   138   1750007     238725.8      0.1      1.4  	for i in range(Df.shape[1]):
   139                                           		# channelごとの許容範囲に収まらないタイミングのbool
   140   1750000     660552.8      0.4      3.9  		Du_target = Du[:,i,:]
   141   1750000     595416.0      0.3      3.6  		Dl_target = Dl[:,i,:]
   142   1750000    4065372.8      2.3     24.3  		boundary_bool = np.minimum(u_per_channel_array, Du_target) - np.maximum(l_per_channel_array, Dl_target) < 0
   143                                           		# 許容範囲を超えたチャネルのインデックスを取得
   144   1750000    2118332.5      1.2     12.7  		indices = np.where(boundary_bool)
   145                                           		# インデックスをタプルのリストに変換
   146   1750000    1710471.3      1.0     10.2  		index_array = list(zip(indices[0], indices[1]))
   147                                           
   148   1750000     355199.4      0.2      2.1  		if len(index_array) >= 1:
   149    295066      49905.3      0.2      0.3  			for img_index, channel_index in index_array:
   150    234818     281370.7      1.2      1.7  				Df[img_index, head_per_channel_array[img_index, channel_index]:i, channel_index] = (u_per_channel_array[img_index, channel_index] + l_per_channel_array[img_index, channel_index])/2 # compute a median [l, u]
   151    234818      84068.6      0.4      0.5  				u_per_channel_array[img_index, channel_index] = float(np.inf) # reinit
   152    234818      95970.8      0.4      0.6  				l_per_channel_array[img_index, channel_index] = -u_per_channel_array[img_index, channel_index] # reinit
   153    234818      51765.7      0.2      0.3  				head_per_channel_array[img_index, channel_index] = i # update to the fist index of the next product(intersect) set
   154                                           
   155   1750000    3156718.1      1.8     18.9  		u_per_channel_array = np.where(u_per_channel_array > Du_target, Du_target, u_per_channel_array) # accumulate product(intersect) set
   156   1750000    3016808.1      1.7     18.0  		l_per_channel_array = np.where(l_per_channel_array < Dl_target, Dl_target, l_per_channel_array) # accumulate product(intersect) set	
   157                                           
   158                                           	# 画像のループ
   159        38         37.3      1.0      0.0  	for img_index in range(Df.shape[0]):
   160                                           		# チャンネルのループ
   161       124         30.4      0.2      0.0  		for channel_index in range(Df.shape[2]):
   162        93        142.8      1.5      0.0  			Df[img_index, head_per_channel_array[img_index, channel_index]:len(Df), channel_index] = (u_per_channel_array[img_index, channel_index] + l_per_channel_array[img_index, channel_index])/2 # compute the last median [l, u]
   163                                           
   164         7          1.8      0.3      0.0  	if GPU_FLAG:
   165         7      17893.0   2556.1      0.1  		Df = xp.asarray(Df)
   166                                           
   167         7        115.6     16.5      0.0  	return Df.reshape(diff.shape) # convert back to 2D array

Total time: 39.2319 s
File: src/tezip.py
Function: main at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def main(arg):
    17                                           
    18         1          0.7      0.7      0.0    if arg.force:
    19                                               os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
    20                                           
    21                                             # GPUの有無を確認
    22         1       1683.7   1683.7      0.0    devices = device_lib.list_local_devices()
    23         1          0.6      0.6      0.0    GPU_flag = False
    24                                           
    25         5          0.9      0.2      0.0    for device in devices:
    26         4          3.8      0.9      0.0      if device.device_type == 'GPU':
    27         1          0.1      0.1      0.0        GPU_flag = True
    28                                           
    29         1          0.1      0.1      0.0    if GPU_flag:
    30         1         27.6     27.6      0.0      print('GPU MODE')
    31                                             else:
    32                                               print('CPU MODE')
    33                                           
    34         1          1.7      1.7      0.0    if (arg.learn != None and arg.compress != None) or (arg.compress != None and arg.uncompress != None) or (arg.learn != None and arg.uncompress != None):
    35                                               print('ERROR')
    36                                               print('Please select only one of learn or compress or uncompress.')
    37                                               print('Command to check the options is -h or --help')
    38                                             
    39         1          0.2      0.2      0.0    elif arg.learn != None:
    40                                               print('train mode')
    41                                               train.run(arg.learn[0], arg.learn[1], arg.verbose)
    42                                           
    43         1          0.2      0.2      0.0    elif arg.compress != None:
    44         1          2.9      2.9      0.0      print('compress mode')
    45         1          1.3      1.3      0.0      if arg.preprocess != None:
    46         1          0.8      0.8      0.0        if arg.window == None and arg.threshold == None:
    47                                                   print('ERROR')
    48                                                   print('Please specify the window size(-w or --window) or MSE threshold(-t or --threshold) option!')
    49                                                   print('Select window size for SWP and MSE threshold for DWP.')
    50         1          0.5      0.5      0.0        elif arg.window != None and arg.threshold != None:
    51                                                   print('ERROR')
    52                                                   print('Please select only one of window size(-w or --window) or MSE threshold(-t or --threshold)!')
    53                                                   print('Select window size for SWP and MSE threshold for DWP.')
    54                                                 else:
    55         1          2.2      2.2      0.0          print(arg.mode[0])
    56         1          0.6      0.6      0.0          if arg.mode[0] == 'abs' or arg.mode[0] == 'rel' or arg.mode[0] == 'absrel' or arg.mode[0] == 'pwrel':
    57         1          1.2      1.2      0.0            if arg.bound != None and len(arg.bound) != 0:
    58         1          0.3      0.3      0.0              if ((arg.mode[0] == 'abs' or arg.mode[0] == 'rel' or arg.mode[0] == 'pwrel') and len(arg.bound) == 1) or (arg.mode[0] == 'absrel' and len(arg.bound) == 2):
    59         1          0.3      0.3      0.0                if arg.window != None:
    60         1   39230206.3    4e+07    100.0                  compress.run(arg.compress[0], arg.compress[1], arg.compress[2], arg.preprocess[0], arg.window[0], arg.threshold, arg.mode[0], arg.bound, GPU_flag, arg.verbose, arg.no_entropy)
    61                                                         elif arg.threshold != None:
    62                                                           compress.run(arg.compress[0], arg.compress[1], arg.compress[2], arg.preprocess[0], arg.window, arg.threshold[0], arg.mode[0], arg.bound, GPU_flag, arg.verbose, arg.no_entropy)
    63                                                         else:
    64                                                           print('unexpected error')
    65                                                       else:
    66                                                         print('ERROR')
    67                                                         print('If the -m or --mode is \'abs\' or \'rel\' or \'pwrel\', enter one for -b or --bound. : value')
    68                                                         print('If the -m or --mode is \'absrel\', enter two in -b or --bound. : abs_value rel_value')
    69                                                     else:
    70                                                       print('ERROR')
    71                                                       print('Please specify the -b or --bound option!')
    72                                                       print('error bound value.')
    73                                                   else:
    74                                                     print('ERROR')
    75                                                     print('Please specify the -m or --mode correctly!')
    76                                                     print('\'abs\' or \'rel\' or \'absrel\' or \'pwrel\'.')
    77                                               else:
    78                                                 print('ERROR')
    79                                                 print('Please specify the -p or --preprocess option!')
    80                                                 print('warm up num.')
    81                                             
    82                                             elif arg.uncompress != None:
    83                                               print('uncompress mode')
    84                                               decompress.run(arg.uncompress[0], arg.uncompress[1], arg.uncompress[2], GPU_flag, arg.verbose)
    85                                             
    86                                             else:
    87                                               print('ERROR')
    88                                               print('Please mode select!')
    89                                               print('learn or compress or uncompress.')
    90                                               print('Command to check the options is -h or --help')

