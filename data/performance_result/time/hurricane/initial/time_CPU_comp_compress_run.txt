Timer unit: 1e-06 s

Total time: 43.6257 s
File: src/compress.py
Function: run at line 93

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    93                                           @profile
    94                                           def run(WEIGHTS_DIR, DATA_DIR, OUTPUT_DIR, PREPROCESS, WINDOW_SIZE, THRESHOLD, MODE, BOUND_VALUE, GPU_FLAG, VERBOSE, ENTROPY_RUN):
    95                                           
    96         1      17277.0  17277.0      0.0  	if not os.path.exists(OUTPUT_DIR): os.mkdir(OUTPUT_DIR)
    97                                           
    98         1       4765.2   4765.2      0.0  	file_paths = sorted(glob.glob(os.path.join(DATA_DIR, '*')))
    99                                           
   100         1          1.4      1.4      0.0  	if len(file_paths) == 0:
   101                                           		print("ERROR:", DATA_DIR, "is an empty or non-existent directory")
   102                                           		exit()
   103                                           
   104         1          0.5      0.5      0.0  	try:
   105         1      14355.5  14355.5      0.0  		origine_img = np.array(Image.open(file_paths[0]))
   106                                           
   107         1       4306.0   4306.0      0.0  		image_mode = Image.open(file_paths[0]).mode
   108                                           		# if image is other than RGB and grayscale, exit()
   109         1          4.6      4.6      0.0  		if all([image_mode != 'RGB', image_mode != 'L']):
   110                                           			print("ERROR: input image is {0}. Only RGB and grayscale are supported.".format(image_mode))
   111                                           			exit()
   112                                           
   113                                           		# gray scale convert RGB
   114         1          0.6      0.6      0.0  		isRGB = image_mode == 'RGB' # Identify input image channel.
   115         1       8262.5   8262.5      0.0  		origine_img = np.array(Image.open(file_paths[0])) if isRGB else np.array(Image.open(file_paths[0]).convert('RGB'))
   116                                           
   117         1          7.5      7.5      0.0  		origine_img = origine_img[np.newaxis, np.newaxis, :, :, :]
   118         1         14.8     14.8      0.0  		files = [os.path.basename(file_paths[0])]
   119        34         20.3      0.6      0.0  		for path in file_paths[1:]:
   120        33     524257.5  15886.6      1.2  			img = np.array((Image.open(path))) if isRGB else np.array((Image.open(path).convert('RGB')))
   121        33        232.7      7.1      0.0  			img = img[np.newaxis, np.newaxis, :, :, :]
   122        33      78314.7   2373.2      0.2  			origine_img = np.hstack([origine_img, img])
   123        33        634.4     19.2      0.0  			files.append(os.path.basename(path))
   124                                           	except PermissionError as e:
   125                                           		print(DATA_DIR, "contains files or folders that are not images.")
   126                                           		exit()
   127                                           	except IndexError as e:
   128                                           		print(DATA_DIR, "contains files or folders that are not images.")
   129                                           		exit()
   130                                           	except UnidentifiedImageError as e:
   131                                           		print(DATA_DIR, "contains files or folders that are not images.")
   132                                           		exit()
   133                                           
   134         1       6026.0   6026.0      0.0  	with open(os.path.join(OUTPUT_DIR, 'filename.txt'), 'w', encoding='UTF-8') as f:
   135         1          6.2      6.2      0.0  		f.write(f"{int(isRGB)}\n") # Append rgb status to filename for later possible grayscale recovery.
   136        35       1900.9     54.3      0.0  		for file_name in files:
   137        34         12.6      0.4      0.0  			f.write("%s\n" % file_name)
   138                                           
   139         1      22653.3  22653.3      0.1  	X_test = origine_img.astype(np.float32) /255
   140                                           
   141         1          0.7      0.7      0.0  	batch_size = 10
   142         1          6.2      6.2      0.0  	nt = X_test.shape[1] # 画像の枚数
   143                                           
   144         1         24.3     24.3      0.0  	weights_file = os.path.join(WEIGHTS_DIR, 'prednet_weights.hdf5')
   145         1          2.7      2.7      0.0  	json_file = os.path.join(WEIGHTS_DIR, 'prednet_model.json')
   146                                           
   147                                           	# Load trained model
   148         1          0.5      0.5      0.0  	try:
   149         1       3237.4   3237.4      0.0  		f = open(json_file, 'r')
   150                                           	except FileNotFoundError as e:
   151                                           		print("ERROR: No such file or directory:", json_file)
   152                                           		exit()
   153                                           	else :
   154         1       1277.7   1277.7      0.0  		json_string = f.read()
   155         1       1485.8   1485.8      0.0  		f.close()
   156         1     405335.0 405335.0      0.9  		train_model = model_from_json(json_string, custom_objects = {'PredNet': PredNet})
   157         1          0.3      0.3      0.0  	try:
   158         1     612567.9 612567.9      1.4  		train_model.load_weights(weights_file)
   159                                           	except OSError as e:
   160                                           		print("ERROR: No such file or directory:", weights_file)
   161                                           		exit()
   162                                           
   163                                           	# Create testing model (to output predictions)
   164         1         41.1     41.1      0.0  	layer_config = train_model.layers[1].get_config()
   165         1          0.5      0.5      0.0  	layer_config['output_mode'] = 'prediction'
   166         1          0.4      0.4      0.0  	data_format = layer_config['data_format'] if 'data_format' in layer_config else layer_config['dim_ordering']
   167                                           
   168                                           	# モデルセッティング
   169         1      26823.4  26823.4      0.1  	test_prednet = PredNet(weights=train_model.layers[1].get_weights(), **layer_config)
   170         1          4.9      4.9      0.0  	input_shape = list(train_model.layers[0].batch_input_shape[2:])
   171         1          1.0      1.0      0.0  	input_shape.insert(0, None)
   172         1        629.5    629.5      0.0  	inputs = Input(shape=tuple(input_shape))
   173         1     584997.2 584997.2      1.3  	predictions = test_prednet(inputs)
   174         1        180.7    180.7      0.0  	test_model = Model(inputs=inputs, outputs=predictions)
   175                                           
   176                                           	# 推論用に元画像にパディング
   177         1      40154.4  40154.4      0.1  	X_test_pad = data_padding(X_test)
   178                                           
   179         1         79.4     79.4      0.0  	if test_model.input.shape[2] != X_test_pad.shape[2] or test_model.input.shape[3] != X_test_pad.shape[3]:
   180                                           		print("ERROR:Image size is out of scope for this model.")
   181                                           		print("Compatible sizes for this model are height", test_model.input.shape[2] - 7, "to", test_model.input.shape[2], "and width",  test_model.input.shape[3] - 7, "to", test_model.input.shape[3])
   182                                           		exit()
   183                                           
   184         1       1512.8   1512.8      0.0  	key_frame = np.zeros(origine_img.shape, dtype='uint8')
   185                                           
   186         1          0.6      0.6      0.0  	origine_list = []
   187         1          0.5      0.5      0.0  	predict_list = []
   188                                           
   189                                           	# warm up
   190         4          8.4      2.1      0.0  	for w_idx in range(PREPROCESS):
   191         3        209.7     69.9      0.0  		key_frame[0, w_idx] =  origine_img[0, w_idx]
   192         3          5.3      1.8      0.0  		X_test_one = X_test_pad[0, w_idx]
   193         3         12.6      4.2      0.0  		X_test_one = X_test_one[np.newaxis, np.newaxis, :, :, :]
   194         3        910.0    303.3      0.0  		X_test_tmp = np.zeros(X_test_one.shape)
   195         3       3207.0   1069.0      0.0  		X_test_one = np.hstack([X_test_one, X_test_tmp])
   196         3    1914692.2 638230.7      4.4  		X_hat = test_model.predict(X_test_one, batch_size)
   197                                           
   198         3          6.8      2.3      0.0  		warm_up_frame = X_hat[0, 0]
   199         3         10.1      3.4      0.0  		warm_up_frame = warm_up_frame[np.newaxis, np.newaxis, :, :, :]
   200         3          1.4      0.5      0.0  		if w_idx == 0:
   201         1          0.6      0.6      0.0  			predict_stack_np = warm_up_frame
   202                                           		else:
   203         2       1790.9    895.4      0.0  			predict_stack_np = np.hstack([predict_stack_np, warm_up_frame])
   204                                           
   205         1          1.0      1.0      0.0  	if PREPROCESS != 0:
   206         1          4.7      4.7      0.0  		origine_list.append(origine_img[:, :PREPROCESS])
   207         1          0.5      0.5      0.0  		predict_list.append(predict_stack_np)
   208         1          1.1      1.1      0.0  		predict_stack_np = X_hat[0, 0]
   209         1          2.4      2.4      0.0  		predict_stack_np = predict_stack_np[np.newaxis, np.newaxis, :, :, :]
   210                                           
   211         1          0.7      0.7      0.0  		origine_stack_np = origine_img[0, PREPROCESS]
   212         1          0.7      0.7      0.0  		origine_stack_np = origine_stack_np[np.newaxis, np.newaxis, :, :, :]
   213                                           
   214                                           	# predict
   215         1          1.6      1.6      0.0  	key_idx = PREPROCESS + 1
   216         1          0.2      0.2      0.0  	stop_point = 0
   217         1          0.4      0.4      0.0  	idx = PREPROCESS + 1
   218        31         41.6      1.3      0.0  	while(idx < X_test_pad.shape[1]):
   219        30         13.2      0.4      0.0  		if idx == key_idx:
   220         6         10.7      1.8      0.0  			X_test_one = X_test_pad[0, idx - 1]
   221         6        413.4     68.9      0.0  			key_frame[0, idx - 1] =  origine_img[0, idx - 1]
   222                                           		else:
   223        24        361.7     15.1      0.0  			X_test_one = predict_stack_np[0, -1]
   224                                           
   225        30         74.6      2.5      0.0  		X_test_one = X_test_one[np.newaxis, np.newaxis, :, :, :]
   226        30       9414.2    313.8      0.0  		X_test_tmp = np.zeros(X_test_one.shape)
   227        30      30366.5   1012.2      0.1  		X_test_one = np.hstack([X_test_one, X_test_tmp])
   228        30   14267833.2 475594.4     32.7  		X_hat = test_model.predict(X_test_one, batch_size)
   229                                           
   230        30         92.5      3.1      0.0  		X_hat_predict_one = X_hat[0, 1]
   231        30        100.4      3.3      0.0  		X_hat_predict_one = X_hat_predict_one[np.newaxis, np.newaxis, :, :, :]
   232                                           
   233        30         28.5      0.9      0.0  		X_test_origine_one = origine_img[0, idx]
   234        30         32.0      1.1      0.0  		X_test_origine_one = X_test_origine_one[np.newaxis, np.newaxis, :, :, :]
   235                                           
   236        30         20.6      0.7      0.0  		if idx == 1:
   237                                           			predict_stack_np = X_hat[0, 0]
   238                                           			predict_stack_np = predict_stack_np[np.newaxis, np.newaxis, :, :, :]
   239                                           			predict_stack_np = np.hstack([predict_stack_np, X_hat_predict_one])
   240                                           			origine_stack_np = origine_img[0, :2]
   241                                           			origine_stack_np = origine_stack_np[np.newaxis, :, :, :]
   242                                           		else:
   243        30      32003.1   1066.8      0.1  			predict_stack_np = np.hstack([predict_stack_np, X_hat_predict_one])
   244        30       9175.4    305.8      0.0  			origine_stack_np = np.hstack([origine_stack_np, X_test_origine_one])
   245                                           
   246        30         46.4      1.5      0.0  		if idx >= key_idx:
   247        30     140639.7   4688.0      0.3  			stop_point = np.mean( (X_test_pad[:, key_idx:idx+1] - predict_stack_np[:, 1:])**2 )
   248        30         17.5      0.6      0.0  			if VERBOSE: print("MSE:", stop_point)
   249                                           
   250        30         63.9      2.1      0.0  		if (THRESHOLD != None and stop_point > THRESHOLD) or (WINDOW_SIZE != None and (idx - PREPROCESS) % WINDOW_SIZE == 0):
   251         6          2.2      0.4      0.0  			if VERBOSE: print("move key point")
   252         6         19.6      3.3      0.0  			origine_result = origine_stack_np[:, :-1]
   253         6         15.4      2.6      0.0  			origine_list.append(origine_result)
   254         6          5.8      1.0      0.0  			predict_result = predict_stack_np[:, :-1]
   255         6          4.4      0.7      0.0  			predict_list.append(predict_result)
   256                                           
   257         6          6.1      1.0      0.0  			origine_stack_np = origine_img[0, idx]
   258         6         13.9      2.3      0.0  			origine_stack_np = origine_stack_np[np.newaxis, np.newaxis, :, :, :]
   259         6          5.5      0.9      0.0  			predict_stack_np = X_hat[0, 0]
   260         6          5.2      0.9      0.0  			predict_stack_np = predict_stack_np[np.newaxis, np.newaxis, :, :, :]
   261         6         10.0      1.7      0.0  			if idx == X_test.shape[1] - 1:
   262         1         59.8     59.8      0.0  				key_frame[0, idx] =  origine_img[0, idx]
   263         1        235.1    235.1      0.0  				predict_stack_np[0, 0] = X_hat[0, 1]
   264         6          4.4      0.7      0.0  			key_idx = idx + 1
   265         6          5.0      0.8      0.0  			stop_point = 0
   266                                           
   267        30         31.7      1.1      0.0  		idx += 1
   268         1          1.5      1.5      0.0  	origine_list.append(origine_stack_np)
   269         1          0.7      0.7      0.0  	predict_list.append(predict_stack_np)
   270                                           
   271                                           	# キーフレームの出力
   272         1       1944.4   1944.4      0.0  	key_frame = key_frame.flatten()
   273         1       2058.5   2058.5      0.0  	key_frame = key_frame.astype('uint8')
   274         1       1943.8   1943.8      0.0  	key_frame_str = key_frame.tostring()
   275                                           
   276                                           	# zstdでキーフレームを圧縮・出力
   277         1      25312.9  25312.9      0.1  	data=zstd.compress(key_frame_str, 9)
   278         1       3699.4   3699.4      0.0  	with open(os.path.join(OUTPUT_DIR, "key_frame.dat"), mode='wb') as f:
   279         1       1647.4   1647.4      0.0  		f.write(data)
   280                                           
   281                                           	# GPU無:numpy GPU有:cupyに設定
   282         1          1.1      1.1      0.0  	if GPU_FLAG:
   283                                           		# tensorflowが占有しているメモリを解放
   284                                           		cuda.select_device(0)
   285                                           		cuda.close()
   286                                           		import cupy as xp
   287                                           	else:
   288         1          5.8      5.8      0.0  		import numpy as xp
   289                                           
   290         1          0.3      0.3      0.0  	error_bound_time = 0
   291                                           
   292                                           	# エラーバウンド機構実施の準備
   293         1          1.0      1.0      0.0  	difference_list = []
   294         9         16.1      1.8      0.0  	for idx in range(len(origine_list)):
   295         8      40519.3   5064.9      0.1  		origine_pick = origine_list[idx] /255
   296         8         16.3      2.0      0.0  		predict_pick = predict_list[idx]
   297                                           
   298                                           		# 推論画像からパディングを外す
   299         8         61.7      7.7      0.0  		predict_pick_no_pad = predict_pick[:, :, :X_test.shape[2], :X_test.shape[3]]
   300                                           
   301                                           		# GPU無:numpy GPU有:cupyに変換
   302         8          8.9      1.1      0.0  		if GPU_FLAG:
   303                                           			origine_pick = xp.asarray(origine_pick)
   304                                           			predict_pick_no_pad = xp.asarray(predict_pick_no_pad)
   305                                           			X_hat_1=xp.multiply(predict_pick_no_pad[:,:],255.000,casting='unsafe')
   306                                           			X_test_1=xp.multiply(origine_pick[:,:],255.000,casting='unsafe')
   307                                           		else:
   308         8      15162.3   1895.3      0.0  			X_hat_1=np.multiply(predict_pick_no_pad[:,:],255.000,casting='unsafe')
   309         8      21818.9   2727.4      0.1  			X_test_1=np.multiply(origine_pick[:,:],255.000,casting='unsafe')
   310                                           
   311         8      20697.7   2587.2      0.0  		X_test_1=X_test_1.astype(int)
   312         8      15882.8   1985.3      0.0  		X_hat_1 = X_hat_1.astype(int)
   313                                           
   314         8      28837.3   3604.7      0.1  		difference = (X_hat_1[:, :] - X_test_1[:, :])
   315         8       2846.2    355.8      0.0  		difference[:, 0] = 0
   316         8         14.9      1.9      0.0  		if not (PREPROCESS != 0 and idx == 0):
   317        31         82.7      2.7      0.0  			for img_num in range(1, difference.shape[1]):
   318        24         31.0      1.3      0.0  				start = time.time()
   319        96        193.6      2.0      0.0  				for channel in range(3):
   320        72   16899294.1 234712.4     38.7  					difference[:,img_num, :, :, channel] = error_bound(X_test_1[:,img_num, :, :, channel], difference[:,img_num, :, :, channel], MODE, BOUND_VALUE, GPU_FLAG, xp)
   321                                           
   322        24         78.7      3.3      0.0  				elapsed_time = time.time() - start
   323        24         22.1      0.9      0.0  				error_bound_time = error_bound_time + elapsed_time
   324                                           
   325         8         22.0      2.7      0.0  		difference_list.append(difference)
   326                                           
   327         1          0.3      0.3      0.0  	if VERBOSE: print ("error_bound:{0}".format(error_bound_time) + "[sec]")
   328                                           
   329                                           	# 推論結果をまとめる　GPU&pwrelの場合はこの段階でcupyに切り替わる
   330         1          0.8      0.8      0.0  	difference_model = difference_list[0]
   331         8         13.3      1.7      0.0  	for X_hat_np in difference_list[1:]:
   332         7     153901.2  21985.9      0.4  		difference_model = xp.hstack([difference_model, X_hat_np])
   333                                           
   334         1      12093.0  12093.0      0.0  	difference_model = difference_model.astype('int16')
   335                                           
   336                                           	# Density-based Spatial Encoding
   337                                           
   338         1          4.8      4.8      0.0  	start = time.time()
   339                                           
   340         1      17057.3  17057.3      0.0  	difference_model = finding_difference(difference_model)
   341         1       3205.0   3205.0      0.0  	difference_model=difference_model.flatten()
   342                                           
   343         1          5.2      5.2      0.0  	elapsed_time = time.time() - start
   344                                           
   345         1          0.7      0.7      0.0  	if VERBOSE: print ("finding_difference:{0}".format(elapsed_time) + "[sec]")
   346                                           
   347         1          0.5      0.5      0.0  	if ENTROPY_RUN:
   348                                           		# エントロピー符号化のテーブル作成のために適当な正の整数に変換(1600との差分として保存)
   349         1       7253.7   7253.7      0.0  		difference_model = xp.subtract(1600, difference_model)
   350                                           
   351                                           		# エントロピー符号化用のテーブル作成
   352         1          5.1      5.1      0.0  		start = time.time()
   353         1          1.6      1.6      0.0  		table = []
   354         1       3407.1   3407.1      0.0  		x_elem = difference_model.flatten()
   355         1      67738.8  67738.8      0.2  		y_elem = xp.bincount(x_elem)
   356         1         37.0     37.0      0.0  		ii_elem = xp.nonzero(y_elem)[0]
   357         1        111.1    111.1      0.0  		d = list(zip(ii_elem, y_elem[ii_elem]))
   358         1         79.7     79.7      0.0  		d.sort(key=takeSecond, reverse=True)
   359       400        109.3      0.3      0.0  		for key, value in d :
   360       399        120.8      0.3      0.0  			table.append(key)
   361                                           
   362         1         35.7     35.7      0.0  		table_xp = xp.array(table, dtype='int16')
   363                                           
   364         1          3.7      3.7      0.0  		elapsed_time = time.time() - start
   365                                           
   366         1          0.4      0.4      0.0  		if VERBOSE: print ("table_create:{0}".format(elapsed_time) + "[sec]")
   367                                           
   368         1          0.5      0.5      0.0  		start = time.time()
   369                                           		# エントロピー符号化
   370         1    7218392.5    7e+06     16.5  		difference_model = replacing_based_on_frequency(difference_model, table_xp, xp)
   371                                           
   372         1          5.0      5.0      0.0  		elapsed_time = time.time() - start
   373                                           
   374         1          0.7      0.7      0.0  		if VERBOSE: print ("replacing_based_on_frequency:{0}".format(elapsed_time) + "[sec]")
   375                                           
   376         1       6181.8   6181.8      0.0  	result_difference = difference_model.flatten()
   377                                           
   378                                           	# cupyに変換していたらnumpyに戻す(他ライブラリが絡む&append未実装のバージョンがあるため)
   379         1          1.2      1.2      0.0  	if GPU_FLAG:
   380                                           		result_difference = xp.asnumpy(result_difference)
   381                                           
   382         1          1.1      1.1      0.0  	if ENTROPY_RUN:
   383                                           		# 差分配列の末尾にエントロピー符号化のテーブルを仕込んでおく
   384         1         48.4     48.4      0.0  		s_np = np.array(table, dtype='int16')
   385         1       7192.0   7192.0      0.0  		result_difference = np.append(result_difference, s_np)
   386         1      31837.7  31837.7      0.1  		result_difference = np.append(result_difference, len(table))
   387                                           	else:
   388                                           		result_difference = np.append(result_difference, -1)
   389                                           
   390                                           	# 差分配列の末尾にshapeとPREPROCESSを仕込んで保存しておく
   391         6         15.8      2.6      0.0  	for shapes in X_test.shape:
   392         5     146062.1  29212.4      0.3  		result_difference = np.append(result_difference, shapes)
   393         1      27548.2  27548.2      0.1  	result_difference = np.append(result_difference, PREPROCESS)
   394                                           
   395         1      15887.9  15887.9      0.0  	result_difference = result_difference.astype(np.int16)
   396         1       7340.4   7340.4      0.0  	result_difference_str = result_difference.tostring()
   397                                           
   398                                           	# zstdで差分を圧縮・出力
   399         1      34786.4  34786.4      0.1  	data=zstd.compress(result_difference_str, 9)
   400         1       5791.4   5791.4      0.0  	with open(os.path.join(OUTPUT_DIR, "entropy.dat"), mode='wb') as f:
   401         1       3782.8   3782.8      0.0  		f.write(data)

